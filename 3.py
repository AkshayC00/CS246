from time import time
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
from scipy.stats import norm


# Creating a list to store random variables generated by Box-Muller method
seq1 = []

# Creating a list to store random variables generated by Marsaglia and Bray method

seq2 = []

# creating functions to generate random variables by Box-Muller method
def z_BM():
    u1 = np.random.uniform(0,1)
    u2 = np.random.uniform(0,1)
    return ( np.sqrt(-2*np.log(u1))*np.cos(2*np.pi*u2), np.sqrt(-2*np.log(u1))*np.sin(2*np.pi*u2) ) 

rejected=0
# creating functions to generate random variables by Marsaglia and Bray method
def z_MB():
    u1=1
    u2=1
    # generate u1, u2 uniformly from a disc of radius 1
    while( u1**2+u2**2 > 1 ):
        global rejected
        rejected+=1
        u1 = np.random.uniform(-1,1)
        u2 = np.random.uniform(-1,1)

    return ( (np.sqrt(-2*np.log(u1**2+u2**2)/(u1**2+u2**2)) * u1), (np.sqrt(-2*np.log(u1**2+u2**2)/(u1**2+u2**2)) * u2) )


# generating the radom variables using Box-Muller method
t1 = time()
for i in range(10000):
    seq1.append(z_BM())
t2 = time()
# generating the radom variables using Marsaglia and Bray method
for i in range(10000):
    seq2.append(z_MB())
t3 = time()
# converting the lists into arrays
seq1=np.array(seq1)
seq2=np.array(seq2)

print("Mean of Z1 generated from Box-Muller method: ", np.mean(seq1[:,0]))
print("Variance of Z1 generated from Box-Muller method: ", np.var(seq1[:,0]))
print()
print("Mean of Z2 generated from Box-Muller method: ", np.mean(seq1[:,1]))
print("Variance of Z2 generated from Box-Muller method: ", np.var(seq1[:,1]))
print()
print("Mean of Z1 generated from Marsaglia and Bray method: ", np.mean(seq2[:,0]))
print("Variance of Z1 generated from Marsaglia and Bray method: ", np.var(seq2[:,0]))
print()
print("Mean of Z2 generated from Marsaglia and Bray method: ", np.mean(seq2[:,1]))
print("Variance of Z2 generated from Marsaglia and Bray method: ", np.var(seq2[:,1]))
print()

print(f"The time taken for Box-Muller method = {t2-t1} sec")
print(f"The time taken for Marsaglia and Bray method = {t3-t2} sec")

print(f"Portion of values rejected = {(rejected-10000)/rejected}")

fig1 = plt.figure(figsize=(20,20))

plt.subplot(2,2,1)
plt.hist2d(seq1[:100,0], seq1[:100,1], bins=20)
plt.subplot(2,2,2)
plt.hist2d(seq2[:100,0], seq2[:100,1], bins=20)
plt.subplot(2,2,3)
plt.hist2d(seq1[:10000,0], seq1[:10000,1], bins=20)
plt.subplot(2,2,4)
plt.hist2d(seq2[:10000,0], seq2[:10000,1], bins=20)
plt.show()

z1 = seq1[:,0]*np.sqrt(5)+0
z2 = seq1[:,0]*np.sqrt(5)+5

fig2 = plt.figure(figsize=(20,20))
x_axis = np.arange(-10, 10, 0.001)

# plot histograms for the new normal distributions
plt.subplot(2,1,1)
plt.hist(z1, bins=50, density=True)
plt.subplot(2,1,2)
plt.hist(z2, bins=50, density=True)

# Plot actual density function

# Mean = 0, var = 5
plt.subplot(2,1,1)
plt.plot(x_axis, norm.pdf(x_axis,0,np.sqrt(5)), '-r')
plt.subplot(2,1,2)
# Mean = 5, var = 5
plt.plot(x_axis, norm.pdf(x_axis,5,np.sqrt(5)), '-r')

plt.show()



